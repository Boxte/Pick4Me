{"version":3,"sources":["js/actions/index.js","js/constants/ai-keywords.js","js/components/MicrophoneButton.js","js/components/InputSelection.js","js/components/PickButton.js","js/constants/example-phrasewords.js","js/components/TextInput.js","js/components/RestaurantResult.js","js/components/LocationInput.js","App.js","serviceWorker.js","index.js"],"names":["config","headers","Authorization","process","yelpConfig","getAnswerFrom","message","a","fetch","method","then","response","ok","json","getListOfRestaurants","details","params","term","limit","location","searchTerm","hasOwnProperty","undefined","includes","concat","url","corsAnywhere","URLSearchParams","console","log","r","Error","statusText","catch","err","readAiResponse","entity","obj","foodType","MicrophoneButton","props","styling","classNames","listening","className","icon","faMicrophone","onClick","action","InputSelection","handleSwitch","faKeyboard","PickButton","handleSubmit","EXAMPLE_PHRASEWORDS","TextInput","useState","text","setText","hasError","setHasError","randomNumber","Math","floor","random","length","randomPhrase","handleTextSubmit","value","ErrorMessage","placeholder","type","onChange","event","target","handleTextChange","onKeyPress","key","RestaurantResult","restaurant","imageUrl","image_url","name","rating","price","address","display_address","join","window","open","src","toFixed","LocationInput","htmlFor","id","Transcript","transcript","App","setGettingAnswer","randomPick","setRandomPick","userUtterance","setUserUtterance","setLocation","SpeechRecognition","browserSupportsSpeechRecognition","isMicrophoneAvailable","isErrorPresent","setIsErrorPresent","isCurrentInputSelectionVoice","setIsCurrentInputSelectionVoice","setRandomPhrase","useSpeechRecognition","resetTranscript","finalTranscript","_","isEmpty","restaurantsJson","list","businesses","option","content","stopListening","startListening","faRedoAlt","val","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e1ba7c70.chunk.js","sourcesContent":["import {\n  ENTITY_ETHNCITY,\n  ENTITY_LOCATION,\n  INTENT_RESTAURANT_GET,\n  ENTITY_FOOD_TYPE,\n  ENTITY_GENERIC,\n  ENTITY_RESTAURANT_TYPE,\n} from \"../constants/ai-keywords\";\n\nimport _ from \"lodash\";\n\nconst witAiToken = process.env.REACT_APP_WIT_AI_TOKEN;\nconst yelpApiToken = process.env.REACT_APP_YELP_BACKUP_API;\n\nconst config = {\n  headers: { Authorization: `Bearer ${witAiToken}` },\n};\n\nconst yelpConfig = {\n  headers: { Authorization: `Bearer ${yelpApiToken}` },\n};\n\nconst baseLink = \"https://api.wit.ai/message\";\nconst baseYelpLink = \"https://api.yelp.com/v3/businesses/search?\";\nconst corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n\nexport const getAnswerFrom = async (message) => {\n  const response = await fetch(`${baseLink}?q=${message}`, {\n    method: \"get\",\n    ...config,\n  }).then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n  });\n\n  return response;\n};\n\nexport const getListOfRestaurants = async (details) => {\n  const params = {\n    term: `${details[\"foodType\"]}`,\n    limit: 25,\n    location: `${details[\"location\"]}`,\n  };\n\n  var searchTerm = \"\";\n  if (details.hasOwnProperty(\"foodType\")) {\n    searchTerm = details[\"foodType\"];\n    if (searchTerm === undefined) {\n      searchTerm = \"restaurants\";\n    }\n    if (!searchTerm.includes(\"restaurant\")) {\n      searchTerm = searchTerm.concat(\" restaurants\");\n    }\n  } else if (details.hasOwnProperty(\"restaurantType\")) {\n    searchTerm = details[\"restaurantType\"];\n  }\n  params[\"term\"] = searchTerm;\n  const url = corsAnywhere + baseYelpLink + new URLSearchParams(params);\n  console.log(url);\n  const response = await fetch(url, {\n    method: \"get\",\n    ...yelpConfig,\n  })\n    .then((r) => {\n      if (r.ok) {\n        return r.json();\n      } else {\n        throw Error(r.statusText);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  return response;\n};\n\nexport const readAiResponse = (response) => {\n  const intent = response[\"intents\"];\n  const entity = response[\"entities\"];\n\n  var obj = {};\n\n  if (entity.hasOwnProperty(ENTITY_ETHNCITY)) {\n    const foodType = entity[ENTITY_ETHNCITY][0][\"body\"];\n    obj[\"foodType\"] = foodType;\n  } else if (entity.hasOwnProperty(ENTITY_FOOD_TYPE)) {\n    const foodType = entity[ENTITY_FOOD_TYPE][0][\"body\"];\n    obj[\"foodType\"] = foodType;\n  } else if (entity.hasOwnProperty(ENTITY_GENERIC)) {\n    obj[\"foodType\"] = \"restaurants\";\n  } else if (entity.hasOwnProperty(ENTITY_RESTAURANT_TYPE)) {\n    obj[\"restaurantType\"] = entity[ENTITY_RESTAURANT_TYPE][0][\"body\"];\n  }\n\n  if (entity.hasOwnProperty(ENTITY_LOCATION)) {\n    const location = entity[ENTITY_LOCATION][0][\"body\"];\n    obj[\"location\"] = location;\n  }\n  return obj;\n};\n\nexport const getRandomRestaurantOption = (list) => {\n  var randomNumber = Math.floor(Math.random() * Math.floor(list.length));\n  return list[randomNumber];\n};\n","export const ENTITY_ETHNCITY = \"ethnicity:ethnicity\";\nexport const ENTITY_LOCATION = \"wit$location:location\";\nexport const ENTITY_FOOD_TYPE = \"food_type:food_type\";\nexport const INTENT_RESTAURANT_GET = \"restaurant_get\";\nexport const ENTITY_GENERIC = \"generic:generic\";\nexport const ENTITY_RESTAURANT_TYPE = \"restaurant_type:restaurant_type\";\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport './MicrophoneButton.css';\n\nexport const MicrophoneButton = props => {\n    const styling = classNames({\n        'microphone-button': true,\n        'microphone-button-active': props.listening\n    });\n\n    return (\n        <FontAwesomeIcon \n          className={styling}\n          icon={faMicrophone} \n          onClick={props.action}\n        />\n      );\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrophone, faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./InputSelection.css\";\n\nexport const InputSelection = (props) => {\n  const { handleSwitch } = props;\n  return (\n    <div className=\"internal-input-selection-holder\">\n      <p className=\"input-selection-title\">Talk to Mr. Wit using...</p>\n      <div className=\"internal-input-selection-options-holder\">\n        <button\n          className={classNames(\"voice-button\", \"input-selection-button\")}\n          onClick={() => handleSwitch(true)}\n        >\n          <FontAwesomeIcon icon={faMicrophone} />\n          <span className=\"input-selection-button-text\">Voice</span>\n        </button>\n        <button\n          className={classNames(\"text-button\", \"input-selection-button\")}\n          onClick={() => handleSwitch(false)}\n        >\n          <FontAwesomeIcon icon={faKeyboard} />\n          <span className=\"input-selection-button-text\">Text</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./PickButton.css\";\n\nexport const PickButton = (props) => {\n  const { handleSubmit } = props;\n  return (\n    <button className=\"pick-button\" onClick={handleSubmit}>\n      <span className=\"pick-button-text\">&#129302; Pick</span>\n    </button>\n  );\n};\n","export const EXAMPLE_PHRASEWORDS = [\n  \"I want korean\",\n  \"I'm feeling American\",\n  \"Let's eat Greek\",\n  \"find japanese in new york city\",\n  \"I want asian around seattle\",\n  \"is there japanese near los angeles\",\n  \"i'm looking for italian near chicago\",\n  \"surprise me\",\n  \"i don't know\",\n  \"pick anything\",\n  \"find bakeries near boston\",\n  \"cafes near philly\",\n  \"burgers near orlando\",\n];\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./TextInput.css\";\nimport { PickButton } from \"./PickButton\";\nimport { EXAMPLE_PHRASEWORDS } from \"../constants/example-phrasewords\";\n\nexport const TextInput = (props) => {\n  const [text, setText] = useState(\"\");\n  const [hasError, setHasError] = useState(false);\n  const randomNumber = Math.floor(\n    Math.random() * Math.floor(EXAMPLE_PHRASEWORDS.length)\n  );\n  const [randomPhrase] = useState(EXAMPLE_PHRASEWORDS[randomNumber]);\n  const handleTextSubmit = (value) => {\n    if (!value) {\n      setHasError(true);\n      return;\n    }\n    props.handleTextSubmit(value);\n  };\n\n  const handleTextChange = (event) => {\n    const { value } = event.target;\n    setText(value);\n\n    if (value) {\n      setHasError(false);\n    }\n  };\n\n  const checkKeyPress = (event) => {\n    event.key === \"Enter\" && handleTextSubmit(text);\n  };\n\n  const ErrorMessage = () => {\n    return hasError ? (\n      <p className=\"text-input-error-message\">Tell Mr. Wit what you feeling</p>\n    ) : (\n      <p className=\"text-input-error-message\">&nbsp;</p>\n    );\n  };\n\n  return (\n    <div className=\"text-input-overall-container\">\n      <div className=\"text-input-container\">\n        <FontAwesomeIcon className=\"text-input-indicator\" icon={faKeyboard} />\n        <input\n          className=\"text-input-selection\"\n          placeholder={randomPhrase}\n          type=\"text\"\n          value={text}\n          onChange={(event) => handleTextChange(event)}\n          onKeyPress={checkKeyPress}\n        />\n      </div>\n      <ErrorMessage />\n      <PickButton handleSubmit={() => handleTextSubmit(text)} />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./RestaurantResult.css\";\n\nexport const RestaurantResult = (props) => {\n  const { restaurant } = props;\n  const {\n    image_url: imageUrl,\n    name,\n    url,\n    rating,\n    price,\n    location,\n  } = restaurant;\n  const { display_address: displayAddress } = location;\n  const address = displayAddress.join(\" \");\n  const openUrl = () => {\n    window.open(url, \"_blank\");\n  };\n\n  return (\n    <div className=\"restaurant-card\" onClick={openUrl}>\n      <img src={imageUrl}></img>\n      <p className=\"title\">{name}</p>\n      <div className=\"details\">\n        {price ? <p>{price}</p> : null}\n        <p>{`${rating.toFixed(1)} / 5.0 rating`}</p>\n      </div>\n      <div>{address}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./LocationInput.css\";\n\nexport const LocationInput = (props) => {\n  const { handleTextChange } = props;\n  return (\n    <div className=\"location-input-container\">\n      <label className=\"location-label\" htmlFor=\"location\">\n        Manually set location:\n      </label>\n      <input\n        className=\"location-text-input-selection\"\n        id=\"location\"\n        placeholder=\"zip code or city, state\"\n        onChange={(event) => handleTextChange(event.target.value)}\n        type=\"text\"\n      />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nimport \"./App.css\";\n\nimport {\n  getAnswerFrom,\n  readAiResponse,\n  getRandomRestaurantOption,\n  getListOfRestaurants,\n} from \"../src/js/actions\";\nimport { MicrophoneButton } from \"./js/components/MicrophoneButton\";\nimport { InputSelection } from \"./js/components/InputSelection\";\nimport { TextInput } from \"./js/components/TextInput\";\nimport { RestaurantResult } from \"./js/components/RestaurantResult\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { PickButton } from \"./js/components/PickButton\";\nimport { EXAMPLE_PHRASEWORDS } from \"./js/constants/example-phrasewords\";\nimport { LocationInput } from \"./js/components/LocationInput\";\n\nconst Transcript = (props) => {\n  return props.transcript ? (\n    <p className=\"transcript\">{props.transcript}</p>\n  ) : (\n    <p className=\"transcript\">&nbsp;</p>\n  );\n};\n\nconst ErrorMessage = (props) => {\n  const { hasError } = props;\n  return hasError ? (\n    <p className=\"text-input-error-message\">Tell Mr. Wit what you feeling</p>\n  ) : (\n    <p className=\"text-input-error-message\">&nbsp;</p>\n  );\n};\n\nfunction App() {\n  const [gettingAnswer, setGettingAnswer] = useState(false);\n  const [randomPick, setRandomPick] = useState({});\n  const [userUtterance, setUserUtterance] = useState(\"\");\n  const [location, setLocation] = useState(\"washington d.c.\");\n  const [isMicrophoneAvailable] = useState(\n    SpeechRecognition.browserSupportsSpeechRecognition()\n  );\n  const [isErrorPresent, setIsErrorPresent] = useState(false);\n  const [\n    isCurrentInputSelectionVoice,\n    setIsCurrentInputSelectionVoice,\n  ] = useState(true);\n\n  var randomNumber = Math.floor(\n    Math.random() * Math.floor(EXAMPLE_PHRASEWORDS.length)\n  );\n  const [randomPhrase, setRandomPhrase] = useState(\n    EXAMPLE_PHRASEWORDS[randomNumber]\n  );\n\n  const {\n    transcript,\n    resetTranscript,\n    finalTranscript,\n    listening,\n  } = useSpeechRecognition();\n\n  const startOrStopListening = () => {\n    if (!listening) {\n      resetTranscript();\n      SpeechRecognition.startListening();\n    } else {\n      SpeechRecognition.stopListening();\n      handleTextSubmit(transcript);\n    }\n  };\n\n  const handleSwitch = (val) => {\n    setUserUtterance(\"\");\n    setRandomPick({});\n    setIsCurrentInputSelectionVoice(val);\n    resetTranscript();\n\n    randomNumber = Math.floor(\n      Math.random() * Math.floor(EXAMPLE_PHRASEWORDS.length)\n    );\n    setRandomPhrase(EXAMPLE_PHRASEWORDS[randomNumber]);\n  };\n\n  const handleTextSubmit = async (text) => {\n    if (_.isEmpty(text)) {\n      setIsErrorPresent(true);\n      return;\n    } else {\n      setIsErrorPresent(false);\n    }\n    setUserUtterance(text);\n    await getAnswerFrom(text).then((response) => {\n      setGettingAnswer(true);\n      const details = readAiResponse(response);\n      if (!details.hasOwnProperty(\"location\")) {\n        details[\"location\"] = location;\n      }\n      getListOfRestaurants(details).then((restaurantsJson) => {\n        if (_.isEmpty(restaurantsJson)) {\n          setGettingAnswer(false);\n          setIsErrorPresent(true);\n          return;\n        }\n        const businesses = restaurantsJson[\"businesses\"];\n        const option = getRandomRestaurantOption(businesses);\n        setRandomPick(option);\n        setGettingAnswer(false);\n      });\n    });\n  };\n\n  const handleLocationText = (text) => {\n    setLocation(text);\n  };\n\n  const content = _.isEmpty(randomPick) ? (\n    <div className=\"input-holder\">\n      <div className=\"microphone-holder\">\n        {isCurrentInputSelectionVoice ? (\n          isMicrophoneAvailable ? (\n            <div>\n              {transcript || listening ? (\n                <Transcript transcript={transcript} />\n              ) : (\n                <p className=\"example-phraseword\">{randomPhrase}</p>\n              )}\n              <MicrophoneButton\n                action={startOrStopListening}\n                listening={listening}\n              />\n              <ErrorMessage hasError={isErrorPresent} />\n              <PickButton handleSubmit={() => handleTextSubmit(transcript)} />\n            </div>\n          ) : (\n            <div>\n              <h3>Mr. Wit can't hear on this browser. Use text.</h3>\n              <h4>Supported browsers</h4>\n              <ul className=\"supported-browsers-list\">\n                <li>Chrome (desktop and Android)</li>\n                <li>Microsoft Edge</li>\n                <li>Android Webview</li>\n                <li>Samsung Internet</li>\n              </ul>\n            </div>\n          )\n        ) : (\n          <TextInput handleTextSubmit={handleTextSubmit} />\n        )}\n      </div>\n    </div>\n  ) : (\n    <div className=\"input-holder\">\n      <div className=\"restaurant-result-holder\">\n        <p className=\"utterance\">{`\\\"${userUtterance}\\\"`}</p>\n        <RestaurantResult restaurant={randomPick} />\n        <button\n          className=\"redo-button\"\n          onClick={() => handleTextSubmit(userUtterance)}\n        >\n          <FontAwesomeIcon icon={faRedoAlt} />\n          <span className=\"input-selection-button-text\">\n            I don't want this one\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">Pick4Me</h1>\n        <hr className=\"title-divider\" />\n        <p className=\"subtitle\">\n          I'm too hungry to decide where to eat. Help me Mr. Wit!\n        </p>\n        <p className=\"robot-emoji\">&#129302;</p>\n      </header>\n      <LocationInput handleTextChange={handleLocationText} />\n      {content}\n      <div className=\"input-selection-holder\">\n        <InputSelection handleSwitch={handleSwitch} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}