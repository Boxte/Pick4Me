{"version":3,"sources":["js/actions/index.js","js/constants/ai-keywords.js","js/components/InputSelection.js","js/components/TextInput.js","js/components/RestaurantResult.js","App.js","serviceWorker.js","index.js"],"names":["config","headers","Authorization","process","yelpConfig","getAnswerFrom","message","a","fetch","method","then","response","ok","json","getListOfRestaurants","details","console","log","params","term","limit","location","url","corsAnywhere","URLSearchParams","r","Error","statusText","catch","err","readAiResponse","entity","obj","hasOwnProperty","foodType","InputSelection","props","className","classNames","icon","faMicrophone","faKeyboard","TextInput","useState","text","setText","hasError","setHasError","handleTextSubmit","value","ErrorMessage","placeholder","type","onChange","event","target","handleTextChange","onKeyPress","key","onClick","RestaurantResult","restaurant","JSON","stringify","imageUrl","image_url","name","rating","price","address","display_address","join","window","open","src","App","setGettingAnswer","randomPick","setRandomPick","userUtterance","setUserUtterance","useSpeechRecognition","transcript","resetTranscript","listening","restaurantsJson","list","businesses","option","Math","floor","random","length","SpeechRecognition","browserSupportsSpeechRecognition","content","_","isEmpty","faRedoAlt","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.cf8d271c.chunk.js","sourcesContent":["import { ENTITY_ETHNCITY, ENTITY_LOCATION } from \"../constants/ai-keywords\";\n\nconst witAiToken = process.env.REACT_APP_WIT_AI_TOKEN;\nconst yelpApiToken = process.env.REACT_APP_YELP_API;\n\nconst config = {\n  headers: { Authorization: `Bearer ${witAiToken}` },\n};\n\nconst yelpConfig = {\n  headers: { Authorization: `Bearer ${yelpApiToken}` },\n};\n\nconst baseLink = \"https://api.wit.ai/message\";\nconst baseYelpLink = \"https://api.yelp.com/v3/businesses/search?\";\nconst corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n\nexport const getAnswerFrom = async (message) => {\n  const response = await fetch(`${baseLink}?q=${message}`, {\n    method: \"get\",\n    ...config,\n  }).then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n  });\n\n  return response;\n};\n\nexport const getListOfRestaurants = async (details) => {\n  console.log(details[\"foodType\"]);\n  const params = {\n    term: `${details[\"foodType\"]} restaurants`,\n    limit: 25,\n    location: 23230,\n  };\n  const url = corsAnywhere + baseYelpLink + new URLSearchParams(params);\n\n  const response = await fetch(url, {\n    method: \"get\",\n    ...yelpConfig,\n  })\n    .then((r) => {\n      if (r.ok) {\n        return r.json();\n      } else {\n        throw Error(r.statusText);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  return response;\n};\n\nexport const readAiResponse = (response) => {\n  console.log(typeof response);\n  console.log(response);\n  const entity = response[\"entities\"];\n  var whichType = \"\";\n  var obj = {};\n  if (entity.hasOwnProperty(ENTITY_ETHNCITY)) {\n    const foodType = entity[ENTITY_ETHNCITY][0][\"body\"];\n    obj[\"foodType\"] = foodType;\n  }\n  return obj;\n};\n\nexport const getRandomRestaurantOption = (list) => {\n  var randomNumber = Math.floor(Math.random() * Math.floor(list.length));\n  return list[randomNumber];\n};\n","export const ENTITY_ETHNCITY = \"ethnicity:ethnicity\";\nexport const ENTITY_LOCATION = \"wit$location:location\";\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrophone, faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./InputSelection.css\";\n\nexport const InputSelection = (props) => {\n  return (\n    <div className=\"internal-input-selection-holder\">\n      <p className=\"input-selection-title\">Talk to Mr. Wit using...</p>\n      <div className=\"internal-input-selection-options-holder\">\n        <button\n          className={classNames(\"voice-button\", \"input-selection-button\")}\n        >\n          <FontAwesomeIcon icon={faMicrophone} />\n          <span className=\"input-selection-button-text\">Voice</span>\n        </button>\n        <button className={classNames(\"text-button\", \"input-selection-button\")}>\n          <FontAwesomeIcon icon={faKeyboard} />\n          <span className=\"input-selection-button-text\">Text</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrophone, faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./TextInput.css\";\n\nexport const TextInput = (props) => {\n  const [text, setText] = useState(\"\");\n  const [hasError, setHasError] = useState(false);\n\n  const handleTextSubmit = (value) => {\n    if (!value) {\n      setHasError(true);\n      return;\n    }\n    props.handleTextSubmit(value);\n  };\n\n  const handleTextChange = (event) => {\n    const { value } = event.target;\n    setText(value);\n\n    if (value) {\n      setHasError(false);\n    }\n  };\n\n  const checkKeyPress = (event) => {\n    event.key === \"Enter\" && handleTextSubmit(text);\n  };\n\n  const ErrorMessage = () => {\n    return hasError ? (\n      <p className=\"text-input-error-message\">Tell Mr. Wit what you feeling</p>\n    ) : (\n      <p className=\"text-input-error-message\">&nbsp;</p>\n    );\n  };\n\n  return (\n    <div className=\"text-input-overall-container\">\n      <div className=\"text-input-container\">\n        <FontAwesomeIcon className=\"text-input-indicator\" icon={faKeyboard} />\n        <input\n          className=\"text-input-selection\"\n          placeholder=\"I'm feeling korean\"\n          type=\"text\"\n          value={text}\n          onChange={(event) => handleTextChange(event)}\n          onKeyPress={checkKeyPress}\n        />\n      </div>\n      <ErrorMessage />\n      <button className=\"pick-button\" onClick={() => handleTextSubmit(text)}>\n        <span className=\"pick-button-text\">&#129302; Pick</span>\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./RestaurantResult.css\";\n\nexport const RestaurantResult = (props) => {\n  console.log(\"HERE\");\n  console.log(props.restaurant);\n  console.log(JSON.stringify(props.restaurant));\n  const { restaurant } = props;\n  const {\n    image_url: imageUrl,\n    name,\n    url,\n    rating,\n    price,\n    location,\n  } = restaurant;\n  const { display_address: displayAddress } = location;\n  const address = displayAddress.join(\" \");\n  const openUrl = () => {\n    window.open(url, \"_blank\");\n  };\n\n  return (\n    <div className=\"restaurant-card\" onClick={openUrl}>\n      <img src={imageUrl}></img>\n      <p className=\"title\">{name}</p>\n      <div className=\"details\">\n        <p>{price}</p>\n        <p>{`${rating} / 5.0 rating`}</p>\n      </div>\n      <div>{address}</div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport _ from \"lodash\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nimport \"./App.css\";\n\nimport {\n  getAnswerFrom,\n  readAiResponse,\n  getRandomRestaurantOption,\n  getListOfRestaurants,\n} from \"../src/js/actions\";\nimport { MicrophoneButton } from \"./js/components/MicrophoneButton\";\nimport { InputSelection } from \"./js/components/InputSelection\";\nimport { TextInput } from \"./js/components/TextInput\";\nimport { RestaurantResult } from \"./js/components/RestaurantResult\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport classNames from \"classnames\";\n\nconst testJsonObj = {\n  id: \"jaMCQE8yehS9g0_w2Ns23A\",\n  alias: \"wok-n-roll-henrico-2\",\n  name: \"Wok n Roll\",\n  image_url:\n    \"https://s3-media2.fl.yelpcdn.com/bphoto/FwygwZ4mhUXnIOrJjWHI3A/o.jpg\",\n  is_closed: false,\n  url:\n    \"https://www.yelp.com/biz/wok-n-roll-henrico-2?adjust_creative=AyfAt539G-Dh2_VU_Z12pw&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=AyfAt539G-Dh2_VU_Z12pw\",\n  review_count: 20,\n  categories: [\n    {\n      alias: \"chinese\",\n      title: \"Chinese\",\n    },\n    {\n      alias: \"japanese\",\n      title: \"Japanese\",\n    },\n  ],\n  rating: 3.5,\n  coordinates: {\n    latitude: 37.619164,\n    longitude: -77.52125,\n  },\n  transactions: [\"delivery\"],\n  price: \"$\",\n  location: {\n    address1: \"7514 W Broad St\",\n    address2: \"\",\n    address3: \"\",\n    city: \"Henrico\",\n    zip_code: \"23294\",\n    country: \"US\",\n    state: \"VA\",\n    display_address: [\"7514 W Broad St\", \"Henrico, VA 23294\"],\n  },\n  phone: \"+18044225048\",\n  display_phone: \"(804) 422-5048\",\n  distance: 4460.9204,\n};\n\nconst Dictaphone = () => {\n  return (\n    <div>\n      <button onClick={SpeechRecognition.startListening}>Start</button>\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\n      {/* <button onClick={resetTranscript}>Reset</button> */}\n      <button onClick={() => getAnswerFrom(\"I want chinese\")}>Call</button>\n    </div>\n  );\n};\n\nconst Transcript = (props) => {\n  return props.transcript ? (\n    <p className=\"transcript\">{props.transcript}</p>\n  ) : (\n    <p className=\"transcript\">&nbsp;</p>\n  );\n};\n\nfunction App() {\n  const [gettingAnswer, setGettingAnswer] = useState(false);\n  const [randomPick, setRandomPick] = useState({});\n  const [userUtterance, setUserUtterance] = useState(\"i want chinese\");\n  const { transcript, resetTranscript, listening } = useSpeechRecognition();\n\n  const startOrStopListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening();\n    } else {\n      SpeechRecognition.stopListening();\n    }\n  };\n\n  const handleTextSubmit = async (text) => {\n    setUserUtterance(text);\n    await getAnswerFrom(text).then((response) => {\n      const details = readAiResponse(response);\n      setGettingAnswer(true);\n      getListOfRestaurants(details).then((restaurantsJson) => {\n        const businesses = restaurantsJson[\"businesses\"];\n        const option = getRandomRestaurantOption(businesses);\n        setRandomPick(option);\n        setGettingAnswer(false);\n      });\n    });\n  };\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return (\n      <div className=\"App\">\n        <p>Browser does not support speech recognition</p>\n      </div>\n    );\n  }\n\n  const content = _.isEmpty(randomPick) ? (\n    <div className=\"input-holder\">\n      <div className=\"microphone-holder\">\n        {/* <Transcript transcript={transcript} />\n    <MicrophoneButton\n      action={startOrStopListening}\n      listening={listening}\n    /> */}\n        <TextInput handleTextSubmit={handleTextSubmit} />\n      </div>\n    </div>\n  ) : (\n    <div className=\"input-holder\">\n      <div className=\"restaurant-result-holder\">\n        <p className=\"utterance\">{`\\\"${userUtterance}\\\"`}</p>\n        <RestaurantResult restaurant={randomPick} />\n        <button\n          className=\"redo-button\"\n          onClick={() => handleTextSubmit(userUtterance)}\n        >\n          <FontAwesomeIcon icon={faRedoAlt} />\n          <span className=\"input-selection-button-text\">\n            Let's do that again\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">Pick4Me</h1>\n        <hr className=\"title-divider\" />\n        <p className=\"subtitle\">\n          I'm too hungry to decide where to eat. Help me Mr. Wit!\n        </p>\n        <p className=\"robot-emoji\">&#129302;</p>\n      </header>\n      {content}\n      <div className=\"input-selection-holder\">\n        <InputSelection />\n      </div>\n      {/* <Dictaphone></Dictaphone> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}